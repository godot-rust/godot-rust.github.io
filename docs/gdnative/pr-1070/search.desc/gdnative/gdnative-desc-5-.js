searchState.loadedDescShard("gdnative", 5, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRotation matrix from axis and angle.\nConstructs a quaternion that will rotate around the given …\nConstructs a quaternion from the given Basis\nCreates a new transform from three basis vectors and the …\nCreates a new transform from three basis vectors and the …\nConstructs a basis matrix from 3 linearly independent …\nCreates a <code>Rect2</code> by x, y, width, and height.\nCreates a new <code>Plane</code> from normal and origin distance.\nCreates a diagonal matrix from the given vector.\nCreates a rotation matrix from Euler angles.\nConstructs a quaternion that will perform a rotation …\nParses from a HTML color code, or <code>None</code> on parse error.\nCreates a new <code>Plane</code> from three <code>Vector3</code>, given in clockwise …\nConstructs a pure rotation basis matrix from the given …\nConstruct a color from a single <code>u32</code> value, in <code>RGBA</code> format.\nConstructs a color from four integer channels, each in …\nCreates a basis from 3 row vectors. These are <strong>not</strong> basis …\nConstructs the transform from a given scale, angle (in …\nCreates a new <code>PoolArray</code> by copying from <code>src</code>.\nCreate a <code>NodePath</code> from a string, e.g. …\nCreates from a <code>VariantArray</code> by making a best effort to …\nCreates a <code>PoolArray</code> moving elements from <code>src</code>.\nGeometric types.\nReturns a copy of the element at the given offset.\nReturns a copy of the element at the given offset.\nReturns a copy of the value corresponding to the key if it …\nGets the position of the 8 endpoints of the bounding box …\nReturns the ID of the referenced resource.\nReturns a mutable reference to the element at the given …\nReturns a mutable reference to the value corresponding to …\nReturns a copy of the value corresponding to the key, or …\nReturns a copy of the element corresponding to the key, or …\nReturns a reference to the element at the given offset.\nReturns a reference to the value corresponding to the key, …\nReturns the resource name of the specified <code>idx</code>, 0 to …\nReturns the number of resource names in the path.\nReturns the support point in a given direction. This is …\nReturns this variant’s type.\nReturns a copy of the bounding box, grown a given amount …\nReturns a copy of this rectangle grown by a given amount …\nReturns a copy of this rectangle grown by a given amount …\nReturns a copy of this rectangle grown by a given amount …\nReturns true if the rectangle is flat or empty. See also …\nReturns true if the bounding box is empty or all of its …\nReturns true if the bounding box is flat or empty. See also\nReturn a hashed i32 value representing the array contents.\nReturn a hashed i32 value representing the dictionary’s …\nInserts an element at the given offset and returns <code>true</code> if …\nInsert a new int at a given position in the array.\nInserts or updates the value of the element corresponding …\nInserts an element by reference at the given offset and …\nInterpolates the transform to other Transform by weight …\nReturns a transform interpolated between this transform …\nReturns the intersection point of the three planes <code>self</code>, <code>b</code> …\nReturns the intersection point of a ray consisting of the …\nReturns the intersection point of a segment from <code>begin</code> to …\nReturns the intersection between two bounding boxes, or …\nReturns the intersection of this rectangle and <code>b</code>, or <code>None</code> …\nReturns true if the bounding box overlaps with <code>b</code>.\nReturns true if the inside of the rectangle overlaps with <code>b</code>…\nReturns true if the rectangle overlaps with <code>b</code> (i.e. they …\nReturns true if the bounding box is on both sides of a …\nReturns true if the bounding box intersects the line …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPut this array under the “shared” access type.\nPut this dictionary under the “shared” access type.\nPut this array under the “thread-local” access type.\nPut this dictionary under the “thread-local” access …\nReturns the inverse of the vector. This is the same as …\nReturns the inverse of the matrix.\nReturns the inverse of the quaternion.\nReturns the inverse of the transform, under the assumption …\nInverts the order of the elements in the array.\nInverts the order of the elements in the array.\nReturns <code>true</code> if the node path is absolute.\nReturns <code>true</code> if the node path is empty.\nReturns <code>true</code> if the container is empty.\nReturns <code>true</code> if the <code>VariantArray</code> contains no elements.\nReturns <code>true</code> if the <code>Dictionary</code> contains no elements.\nReturns true if this vector and v are approximately equal, …\nReturns <code>true</code> if this vector and v are approximately equal, …\nReturns true if this bounding box and <code>b</code> are approximately …\nReturns <code>true</code> if <code>self</code> and <code>other</code> are approximately equal.\nReturns <code>true</code> if this <code>Plane</code> and <code>other</code> are approximately …\nReturns <code>true</code> if this quaternion and <code>quat</code> are approximately …\nReturns true if this rectangle and <code>b</code> are approximately …\nReturns true if this transform and transform are …\nReturns true if this is an empty variant.\nReturns <code>true</code> if the vector is normalized, and false …\nReturns <code>true</code> if the vector is normalized, and <code>false</code> …\nReturns whether the quaternion is normalized or not.\nCheck if this RID is non-empty. This does <strong>not</strong> mean it’s …\nReturns <code>true</code> if <code>point</code> is on the side of the <code>Plane</code>, into …\nReturns an iterator through all values in the <code>VariantArray</code>.\nReturns an iterator through all key-value pairs in the …\nReturns an array of the keys in the <code>Dictionary</code>.\nReturns the number of elements in the array.\nReturns the number of elements in the array.\nReturns the number of elements in the <code>Dictionary</code>.\nReturns the length (magnitude) of this vector.\nReturns the length (magnitude) of this vector.\nReturns the length of the quaternion.\nReturns the squared length (squared magnitude) of this …\nReturns the squared length (squared magnitude) of this …\nReturns the length of the quaternion, squared.\nReturns linear interpolation between two basis by weight …\nReturns the result of the linear interpolation between …\nReturns the result of the linear interpolation between …\nReturns the longest side of this AABB as an axis index and …\nReturns a copy of the transform rotated such that its -Z …\nReturns the axis of the vector’s largest value. See <code>Axis</code> …\nReturns a larger bounding box that contains both this <code>Aabb</code> …\nReturns a larger rectangle that contains this <code>Rect2</code> and <code>b</code>.\nReturns the axis of the vector’s smallest value. See <code>Axis</code>…\nReturns <code>self</code> moved towards <code>to</code> by the distance <code>delta</code>, …\nMoves this vector toward <code>to</code> by the fixed <code>delta</code> amount.\nReturns another quaternion transformed (multiplied) by …\nReturns a vector transformed (multiplied) by this …\nThe <code>stringify!</code> representation of this variant. Mostly used …\nGet the number of node names which make up the path.\nCreate a <code>NodePath</code> from a GodotString.\nCreates an empty array.\nCreates an empty <code>VariantArray</code>.\nCreates an empty <code>Dictionary</code>.\nCreates a <code>Variant</code> from a value that implements <code>ToVariant</code>.\nCreates an empty, invalid RID.\nConstructs a new Vector2 from the given x and y.\nReturns a Vector3 with the given components.\nCreates an <code>Aabb</code> by position and size.\nCreates a new <code>Plane</code> from the <code>normal</code> and the distance from …\nConstructs a quaternion defined by the given values.\nCreates a <code>Rect2</code> by position and size.\nCreates a new reference to this reference-counted instance.\nCreate a new shared array.\nCreate a new shared dictionary.\nCreate a new thread-local array.\nCreate a new thread-local dictionary.\nCreates an empty <code>Variant</code>.\nNormal vector, perpendicular to the plane.\nReturns the vector scaled to unit length. Equivalent to …\nReturns the vector scaled to unit length. Equivalent to …\nReturns the <code>Plane</code> normalized.\nReturns a copy of the quaternion, normalized to unit …\nThe new origin of the transformed coordinate system.\nThe origin of the transform. The coordinate space defined …\nReturns the transform with the basis orthogonal (90 …\nReturns an orthonormalized version of the matrix: 3 …\nReturns the transform with the basis orthogonal (90 …\nReturns the outer product with <code>b</code>.\nRemoves an element at the end of the array.\nRemoves an element at the front of the array.\nThe bounding box’s position in 3D space.\nThe rectangle’s position in 2D space.\nReturns a vector composed of the @GDScript.fposmod of this …\nReturns a vector composed of the <code>rem_euclid</code> of this vector…\nReturns a vector composed of the @GDScript.fposmod of this …\nReturns a vector composed of the <code>rem_euclid</code> of this vector…\nReturns the vector projected onto the vector <code>b</code>.\nReturns this vector projected onto another vector <code>b</code>.\nReturns the orthogonal projection of <code>point</code> onto a point in …\nAppends an element to the end of the array.\nAppends an element at the end of the array.\nAppends an element to the front of the array.\nAppends an element to the end of the array by reference.\nReturns a scoped read-only view into this array.\nReturns the vector reflected from a plane defined by the …\nReturns this vector reflected from a plane defined by the …\nRemoves an element at the given offset.\nRemoves the element at <code>idx</code>.\nChanges the size of the array, possibly removing elements …\nResizes the array, filling with <code>Nil</code> if necessary.\nSearches the array in reverse order. Pass an initial …\nReturns the vector rotated by <code>angle</code> radians.\nRotates this vector around a given axis by <code>phi</code> radians. …\nMultiplies the matrix from left with the rotation matrix: …\nIn-place rotation of the transform around the given axis …\nRotates the transform by the given angle (in radians), …\nReturns the transform’s rotation (in radians).\nReturns the vector with all components rounded to the …\nReturns this vector with all components rounded to the …\nReturns the scale of the matrix.\nReturns the transform’s scale.\nIntroduce an additional scaling specified by the given 3D …\nScales basis and origin of the transform by the given …\nScales the transform by the given scale factor, using …\nSets the value of the element at the given offset.\nSets the value of the element at the given offset.\nSet the <strong>1st basis vector</strong> (first column vector of the …\nSet the <strong>2nd basis vector</strong> (second column vector of the …\nSet the <strong>3rd basis vector</strong> (third column vector of the …\nEnding corner. Setting this value will change the size.\nEnding corner. Setting this value will change the size.\nSets the value of the element at the given offset by …\nSets the transform’s rotation (argument <code>rotation</code> in …\nSets the transform’s scale.\nReturns the shortest side of this AABB as an axis index …\nReturns the vector with each component set to one or …\nReturns a vector with each component set to one or …\nWidth, height, and depth of the bounding box.\nWidth and height.\nReturns the result of spherical linear interpolation …\nReturns the result of spherical linear interpolation …\nReturns linear interpolation on a sphere between two basis …\nReturns the result of the spherical linear interpolation …\nReturns the result of the spherical linear interpolation …\nReturns the component of the vector along a plane defined …\nReturns this vector slid along a plane defined by the …\nReturns the vector snapped to a grid with the given size.\nReturns this vector with each component snapped to the …\nInterpolates the transform to other Transform by weight …\nReturns a perpendicular vector.\nPerforms a strongly-typed, structure-aware conversion to <code>T</code> …\nReturns the reverse of the RGBA32 byte representation for …\nReturns the reverse of the RGBA64 byte representation for …\nReturns the ARGB32 format representation representation …\nReturns the ARGB64 format representation for this color …\nReturns a diagonal matrix with the vector as main diagonal.\nReturns the <code>Basis</code>’s rotation in the form of Euler angles.\nReturns Euler angles (in the YXZ convention: when …\nReturns the <code>NodePath</code> as a <code>GodotString</code>\nReturns a GodotString of the <code>Dictionary</code>.\nConvenience method to extract a <code>Ref&lt;T, Shared&gt;</code> from this …\nConverts matrix into a quaternion.\nReturns the OpenGL Texture format byte representation for …\nReturns the OpenGL Texture format byte representation for …\nReturns this axis as a vector of length 1, with only one …\nCopies all elements to a <code>Vec</code>, leaving this instance …\nReturns this transform, with its origin moved by a certain …\nTranslates the transform by the given offset, relative to …\nTranslates the transform by the given offset, relative to …\nReturns this transform, with its origin moved by a certain …\nReturns the transposed version of the matrix.\nPerforms a strongly-typed, structure-aware conversion to <code>T</code> …\nConvenience method to extract a <code>Ref&lt;T, Shared&gt;</code> from this …\nUpdate an existing element corresponding to the key.\nReturns an array of the values in the <code>Dictionary</code>.\nReturns the volume of the bounding box. See also …\nReturns a scoped read-write view into this array. This …\nReturns a vector transformed (multiplied) by the matrix.\nReturns a vector transformed (multiplied) by this …\nReturns a vector transformed (multiplied) by the matrix.\nTransforms the given Vector2, Rect2, or PoolVector2Array …\nReturns a vector transformed (multiplied) by the …\nReturns a vector transformed (multiplied) by the …\nInverse-transforms the given Vector2, Rect2, or …\nNames of all expected variants known at compile time\nName of the unknown variant\nA pool array access that is (assumed to be) aligned.\nTrait for array access guards\nA pool array access that may be unaligned.\nA pool array write access with an owned aligned copy. The …\nMarker trait for write access guards\nAssumes that an access is aligned.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts to an access backed by an owned, aligned copy of …\nCopies the data out of this access into a <code>Vec</code>.\nTries to convert to an aligned access. Returns <code>None</code> if the …\nA reference-counted <code>Variant</code> vector. Godot’s generic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reference-counted <code>Dictionary</code> of <code>Variant</code> key-value pairs.\nIterator through all key-value pairs in a unique <code>Dictionary</code>…\nIterator through all key-value pairs in a unique <code>Dictionary</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAxis-aligned bounding box.\nA 3x3 matrix, typically used as an orthogonal basis for …\nProvides compatibility with Godot’s <code>Margin</code> enum through …\nError indicating that an <code>i64</code> cannot be converted to a …\n3D plane in Hessian form: <code>a*b + b*y + c*z + d = 0</code>\nQuaternion, used to represent 3D rotations.\n2D axis-aligned bounding box.\nAffine 3D transform (3x4 matrix).\nAffine 2D transform (2x3 matrix).\nThe first basis vector of the transform.\nThe second basis vector of the transform.\nThe basis is a matrix containing 3 vectors as its columns. …\nDistance from the coordinate system origin (in the …\nMatrix rows. These are <strong>not</strong> the basis vectors!\nNormal vector, perpendicular to the plane.\nThe new origin of the transformed coordinate system.\nThe origin of the transform. The coordinate space defined …\nThe bounding box’s position in 3D space.\nThe rectangle’s position in 2D space.\nWidth, height, and depth of the bounding box.\nWidth and height.\nType representing a character in Godot’s native …\nError indicating that a <code>GodotChar</code> cannot be converted to a …\nGodot’s reference-counted string type.\nThe character is part of an incomplete encoding sequence.\nThe character cannot be represented as a Unicode code …\nInterned string.\nThe character’s encoding cannot be determined on this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCannot cast the object to the given Godot class.\nTypes that can be coerced from a <code>Variant</code>. Coercions are …\nA custom error message.\nTypes that can be converted from a <code>Variant</code>. Conversions …\nError type returned by <code>FromVariant::from_variant</code>.\nInvalid enum representation.\nError indicating that the implementation encountered a …\nCollection contains an invalid field.\nGiven object is not an instance of the expected …\nCollection contains an invalid item.\nLength of the collection is different from the expected …\nNull value given for a non-nullable type, with no further …\nError indicating that an operator result is invalid.\nInvalid struct representation.\nVariant type is different from the expected one.\nWrapper type around a <code>FromVariant</code> result that may not be a …\nTypes that can only be safely converted to a <code>Variant</code> as …\nTypes that can be converted to a <code>Variant</code>.\nTrait for types whose <code>ToVariant</code> implementations preserve …\nError indicating that the implementation encountered an …\nAn unspecified error.\nA <code>Variant</code> can represent all Godot values (core types or …\nRust enum associating each primitive variant type to its …\nGodot variant operator kind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNames of all expected variants known at compile time\nName of the unknown variant\nEnable struct types to be parsed as argument lists.\nMakes it possible to use a type as a NativeScript. …\nDeclares the library-level GDNative callbacks. See […\nConvenience macro to wrap an object’s method into a …\nCollects method signatures of all functions in a …\nWires up necessary internals for a concrete …\nMakes a function profiled in Godot’s built-in profiler. …\nBuilder for providing additional argument information for …\nError during argument parsing.\nBase type of the class.\nThe name of the class.\nAllows registration of exported properties, methods and …\nTrait for exportable types.\nMetadata about the exported property.\nTrait for structures that can be parsed from <code>Varargs</code>.\nA type-specific hint type that is valid for the type being …\nDefines which number of arguments is valid.\nAt least one argument type mismatches.\nNumber of arguments doesn’t match expectations.\nSafe low-level trait for stateful, variadic methods that …\nBuilder type used to register a method on a <code>NativeClass</code>.\nTrait for mixins, manually registered <code>#[methods]</code> blocks …\nTrait used for describing and initializing a Godot script …\nTrait used to provide information of Godot-exposed methods …\nTrait for types that can be used as the <code>owner</code> arguments of …\nPlaceholder type for exported properties with no backing …\nBuilder type used to register a property on a <code>NativeClass</code>.\nClass to construct a signal. Make sure to call <code>Self::done()</code>…\nParameter in a signal declaration.\nAdapter for methods whose arguments are statically …\nTrait for methods whose argument lists are known at …\nA NativeScript “class” that is statically named. …\nUser-data wrapper type of the class.\nSafe interface to a list of borrowed method arguments with …\nAll possible errors that can occur when converting from …\nReturns the set containing all flags.\nReturns the remaining arguments as a slice of <code>Variant</code>s.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nCalls the method on <code>this</code> with <code>args</code>.\nCheck the length of arguments.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nDefault value, used when no argument is provided.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nRegister the method.\nDiscard the rest of the arguments, and return an error if …\nFinish registering the signal.\nRegister the property built with this builder.\nRegister the method as a stateless method. Stateless …\nConvenience method to emplace <code>self</code> into an …\nReturns an empty set of flags.\nThe upper (inclusive) bound of the expected number of …\nReturns <code>ExportInfo</code> given an optional typed hint.\nMetadata and UI hints about exporting, e.g. parameter type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nReturns the type-converted value at the specified argument …\nGet the converted argument value.\nReturns the type-converted value at the specified argument …\nGet the argument as optional.\nConvenience macro to wrap an object’s method into a …\nStrongly typed property hints.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the amount of arguments left.\nPrint this error in the Godot debug console as an error.\nPrint this error in the Godot debug console as a warning.\nReturns a <code>MethodBuilder</code> which can be used to add a method …\nAdd a mixin to the class being registered.\nParameter name.\nFunction that creates a value of <code>Self</code>, used for the …\nFunction that registers all exposed methods to Godot.\nFunction that registers methods specific to this …\nRegister any exported properties to Godot.\nWrap <code>f</code> in an adapter that implements <code>Method</code>.\nCreate an <code>ExportInfo</code> with the given Variant type, but …\nConvenience method to create an <code>Instance&lt;Self, Unique&gt;</code>. …\nReturns the complement of this set of flags.\nReturns a <code>PropertyBuilder</code> which can be used to add a …\nReturns a builder for reading the next argument, that can …\nParses a structure that implements <code>FromVarargs</code> …\nRemoves the specified flags in-place.\nCreate an <code>ExportInfo</code> with a hint for a specific Godot …\nInserts or removes the specified flags depending on the …\nReturns a <code>SignalBuilder</code> which can be used to add a signal …\nReturns an optional site where this method is defined. …\nReturns an optional site where this method is defined. …\nThe lower (inclusive) bound of the expected number of …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nIn which context the signal parameter is used.\nCustomizable user-data wrappers.\nSets a default value for the property as a hint to the …\nProvides a getter function with the signature …\nSets an editor hint.\nProvides a getter function with the signature …\nProvides a getter function with the signature …\nProvides a name for this argument. If an old name is …\nAdd a parameter for the signal with a name and type.\nAdd a parameter for the signal, manually configured.\nAdd a parameter for the signal with a name and default …\nAdd a (untyped) parameter for the signal with a name.\nProvides a getter function with the signature …\nSet a RPC mode for this method.\nSets a RPC mode.\nProvides a setter function with the signature …\nProvides a setter function with the signature …\nProvides a call site for this argument. If an old call …\nAssign a call site for this error. If an old one is …\nProvides a more readable type name for this argument. If …\nSets a property usage.\nThe number of arguments actually passed.\nArray hints optionally with an element hint.\nPossible hints for <code>Color</code>.\nHints that a string property is a path to a directory.\nHints that an integer, float or string property is an …\nHints that an integer, float or string property is an …\nHints that an integer, float or string property is an …\nHints that a float property should be edited via an …\nHints that a float property should be edited via an …\nHints that an integer or float property should be within …\nHints that an integer or float property should be within …\nHints that a string property is a path to a file.\nHints that an integer property is a bitmask with named bit …\nPossible hints for floats.\nHints that a string property is an absolute path to a …\nHints that a string property is an absolute path to a file …\nPossible hints for integers.\nHints that an integer property is a bitmask using the …\nHints that an integer property is a bitmask using the …\nHints that an integer property is a bitmask using the …\nHints that an integer property is a bitmask using the …\nHints that a string property is text with line breaks.\nHints that a color property should be edited without …\nHints that a string property should have a placeholder …\nHints that an integer or float property should be within a …\nHints that an integer or float property should be within a …\nHints that an integer or float property should be within …\nPossible hints for strings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlip the curve horizontally.\nAlso include in/out easing.\nMaximal value, inclusive\nMinimal value, inclusive\nCreates a new <code>RangeHint</code>.\nReturns an <code>ArrayHint</code> without a element hint.\nBuilder-style method that returns <code>self</code> with the <code>or_greater</code> …\nAllow manual input above the <code>max</code> value\nBuilder-style method that returns <code>self</code> with the <code>or_lesser</code> …\nAllow manual input below the <code>min</code> value\nOptional step value for the slider\nReturns an <code>ArrayHint</code> with an element hint for type <code>T</code>, but …\nReturns an <code>ArrayHint</code> with an element hint for type <code>T</code>, and …\nReturns an <code>ArrayHint</code> with an element hint for type <code>T</code>, and …\nBuilder-style method that returns <code>self</code> with the given step.\nSpecial user-data wrapper intended for zero-sized types, …\nBlock on all locks. Deadlocks are possible.\nUser-data wrapper encapsulating a <code>Arc&lt;T&gt;</code>. Does not …\nPolicies to deal with potential deadlocks\nDefault lock policy that may change in future versions.\nThe default user data wrapper used by derive macro, when …\nError type indicating that an operation can’t fail.\nUser-data wrapper analogous to a <code>Arc&lt;RefCell&lt;T&gt;&gt;</code>, that is …\nError indicating that a borrow has failed.\nError indicating that a lock wasn’t obtained.\nTrait defining associated constants for locking wrapper …\nTrait for wrappers that can be mapped immutably.\nTrait for wrappers that can be mapped mutably.\nTrait for wrappers that can be mapped once.\nUser-data wrapper encapsulating a <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>.\nSpecial user-data wrapper intended for objects that can …\nNever block on any locks. Methods will return Nil …\nUser-data wrapper encapsulating a <code>Arc&lt;RwLock&lt;T&gt;&gt;</code>.\nBlock on locks for at most <code>Duration</code>. Methods return Nil on …\nTrait for customizable user-data wrappers.\nTakes an opaque pointer produced by <code>into_user_data</code> and “…\nTakes an opaque pointer produced by <code>into_user_data</code> and “…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the internal <code>Arc&lt;T&gt;</code>. Useful for API’s that …\nTakes a native instance and returns an opaque pointer that …\nMaps a <code>&amp;T</code> to <code>U</code>. Called for methods that take <code>&amp;self</code>.\nMaps a <code>&amp;mut T</code> to <code>U</code>. Called for methods that take <code>&amp;mut self</code>.\nMaps a <code>T</code> to <code>U</code>. Called for methods that take <code>self</code>. This …\nMaps a <code>T</code> to <code>U</code>. Called for methods that take <code>self</code>. This …\nCreates a new owned wrapper from a <code>NativeClass</code> instance.\nCoordinate system conversion: cartesian -&gt; polar\nConverts from decibels to linear energy (audio).\nReturns an “eased” value of x based on an easing …\nReturns the floating-point modulus of <code>a/b</code> that wraps …\nFind linear interpolation weight from interpolated values.\nReturns <code>true</code> if <code>a</code> and <code>b</code> are approximately equal to each …\nReturns true if <code>s</code> is zero or almost zero.\nLinearly interpolates between two values, by the factor …\nLinearly interpolates between two angles (in radians), by …\nConverts from linear energy to decibels (audio).\nLoads a resource from the filesystem located at <code>path</code>.\nMoves <code>range.start()</code> toward <code>range.end()</code> by the <code>delta</code> value.\nReturns the nearest equal or larger power of 2 for an …\nCoordinate system conversion: polar -&gt; cartesian\nReturns the integer modulus of <code>a/b</code> that wraps equally in …\nMaps a value from <code>range_from</code> to <code>range_to</code>, using linear …\nSmooth (Hermite) interpolation.\nPosition of the first non-zero digit, after the decimal …\nSnaps float value <code>s</code> to a given <code>step</code>.\nWraps float value between <code>min</code> and <code>max</code>.\nWraps integer value between <code>min</code> and <code>max</code>.\nTrait for declaring library-level GDNative callbacks. See …\nA handle that can register new classes to the engine …\nContext for the <code>godot_gdnative_init</code> callback.\nA handle passed from the engine during NativeScript …\nContext for the <code>godot_gdnative_terminate</code> callback.\nReturns a path to the library relative to the project.\nRegisters a new class to the engine.\nRegisters a new class to the engine\nRegisters a new class to the engine\nRegisters a new class to the engine.\nRegisters a new tool class to the engine.\nRegisters a new tool class to the engine\nRegisters a new tool class to the engine\nRegisters a new tool class to the engine.\nDeclares the library-level GDNative callbacks. See […\nRun-time tracing functions to help debug the init process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCallback invoked on startup, before any other callbacks.\nCallback invoked after startup, immediately after …\nCallback invoked on shutdown, after all other callbacks.\nThis macro now does nothing. It is provided only for …\nThis macro now does nothing. It is provided only for …\nLegacy macro that declares all the API endpoints necessary …\nLegacy macro that declares all the API endpoints necessary …\nReturns true if the library is loaded in the Godot Editor.\nReturns <code>true</code> if the library is loaded in the Godot Editor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCallback invoked every frame if any NativeScripts are …\nCallback invoked after startup, before <code>NativeScript</code>s are …\nCallback invoked during engine cleanup if NativeScript has …\nCallback invoked before a thread managed by Godot other …\nCallback invoked after a thread managed by Godot other …\nChecks the version number of the host Godot instance to …\nChecks for any <code>NativeClass</code> types that are registered …\nChecks if all suggested diagnostics have been ran …\nValue representing a call site for errors and warnings. …\nPrint an error to the Godot console.\nReturns the argument unchanged.\nPrints and returns the value of a given expression for …\nPrint an error using the engine’s logging system …\nPrint a message using the engine’s logging system …\nCreates a <code>Site</code> value from the current position in code, …\nPrint a warning using the engine’s logging system …\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Site</code> value using values provided manually.\nPrint a message to the Godot console.\nPrint a warning to the Godot console.\nTrait for safe conversion from Godot object references …\nTrait for safe conversion from Godot object references …\nTrait for Godot API objects. This trait is sealed, and …\nA persistent reference to a GodotObject with a rust …\nGodotObjects that have a zero argument constructor.\nThe memory management kind of this type. This modifies the …\nA trait for incrementing the reference count to a Godot …\nRepresents an explicit null reference in method arguments. …\nManually managed Godot classes implementing <code>queue_free</code>. …\nAn opaque struct representing Godot objects. This should …\nTrait for types that can be used as the <code>self</code> or <code>#[self]</code> …\nA polymorphic smart pointer for Godot objects whose …\nMarker trait for API types that are subclasses of another …\nA reference to a GodotObject with a rust NativeClass …\nA temporary safe pointer to Godot objects that tracks …\nIncrease the reference count of the object.\nReturns a safe temporary reference that tracks thread …\nReturns the underlying reference without thread access.\nAssume that <code>self</code> is safe to use, returning a reference …\nAssume that <code>self</code> is safe to use.\nAssume that <code>self</code> is safe to use, if a sanity check using …\nCreates a persistent reference to the same Godot object …\nCreates a persistent reference to the same Godot object …\nAssume that all references to the underlying object is …\nAssume that all references to the underlying object is …\nCreates a persistent reference to the same Godot object …\nAssume that <code>self</code> is the unique reference to the underlying …\nAssume that <code>self</code> is the unique reference to the underlying …\nAssume that <code>self</code> is the unique reference to the underlying …\nReturns a reference to the base object.\nReturns a reference to the base object with the same …\nVarious traits to verify memory policy, ownership policy …\nCreates a new instance of a sub-class of <code>T</code> by its class …\nAttempt to cast a Godot object to a different class type.\nPerforms a dynamic reference downcast to target type.\nPerforms a dynamic reference cast to target type, keeping …\nPerforms a dynamic reference cast to target type, keeping …\nPerforms a downcast to a <code>NativeClass</code> instance, keeping the …\nConvenience method to downcast to <code>TInstance</code> where <code>self</code> is …\nAttempt to cast a Godot object to a different class type …\nPersists this reference into a persistent <code>Ref</code> with the …\nPersists this into a persistent <code>Instance</code> with the same …\nReturns the class name of this object dynamically using …\nReturns the base object and the script wrapper.\nCreates a <code>T::Base</code> with a given instance of the script <code>T</code> …\nFree the underlying object.\nManually frees the object.\nFrees the base object and user-data wrapper.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to downcast <code>Ref&lt;T::Base, Own&gt;</code> to <code>Instance&lt;T&gt;</code>, without …\nRecovers a instance ID previously returned by …\nRecovers a instance ID previously returned by …\nCreates a typed reference from a pointer, without checking …\nInitialize the reference count of the object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the base object, dropping the script wrapper.\nReturns the script wrapper.\nConvert to a shared reference.\nCoverts into a <code>Shared</code> instance.\nConvert to a thread-local reference.\nCoverts into a <code>ThreadLocal</code> instance.\nChecks whether the object is of a certain Godot class.\nChecks whether the object is of a certain Godot class by …\nReturns <code>true</code> if the pointer currently points to a valid …\nReturns <code>true</code> if the pointer currently points to a valid …\nCalls a function with a NativeClass instance and its …\nCalls a function with a NativeClass instance and its …\nCalls a function with a NativeClass instance and its …\nCalls a function with a NativeClass instance and its …\nCalls a function with a NativeClass instance and its …\nCalls a function with a NativeClass instance and its …\nMarker types to express the memory management method of …\nCreates a new instance of <code>Self</code> using a zero-argument …\nCreates a new instance of <code>T</code>.\nCreates a <code>T::Base</code> with the script <code>T</code> attached. Both <code>T::Base</code> …\nCreates a new reference to the underlying object.\nCreates an explicitly null reference of <code>Self</code> as a method …\nCreates an explicit null reference that can be used as a …\nTypestates to express ownership and thread safety of Godot …\nQueues the object for deallocation in the near future. …\nQueues the base object and user-data wrapper for …\nReturns a reference to the script wrapper.\nReturns a reference to the script wrapper.\nCasts a reference to this opaque object to …\nPerforms a dynamic reference cast to target type, keeping …\nPerforms a downcast to a <code>NativeClass</code> instance, keeping the …\nTry to downcast <code>Ref&lt;T::Base, Own&gt;</code> to <code>Instance&lt;T&gt;</code>, without …\nTry to downcast <code>TRef&lt;&#39;a, T::Base, Own&gt;</code> to <code>TInstance&lt;T&gt;</code>.\nRecovers a instance ID previously returned by …\nRecovers a instance ID previously returned by …\nCreates a typed reference from a pointer if the pointer is …\nDecrease the reference count of the object. Returns <code>true</code> …\nDecrease the reference count of the object. Frees the …\nPerforms a static reference upcast to a supertype that is …\nPerforms a static reference upcast to a supertype, keeping …\nPerforms a static reference upcast to a supertype that is …\nSimply releases the held object without deallocating it.\nTrait for constraining <code>assume_safe</code> lifetimes to the one of …\nSpecialization trait depending on <code>Memory</code>. This is an …\nSpecialization trait for <code>Drop</code> behavior.\nStruct to be used for various <code>Ref</code> trait bounds.\nTrait for persistent <code>Ref</code>s that point to valid objects. …\nTrait for combinations of <code>Memory</code> and <code>Ownership</code> that can be …\nDecrements the reference count on the held object, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarker that indicates that a type is manually managed.\nTrait to parameterize over the memory management markers …\nMarker that indicates that a type is reference-counted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait to parametrize over the ownership markers that are …\nTrait to parametrize over the ownership markers that are …\nTrait to parametrize over the ownership markers <code>Unique</code>, …\nMarker that indicates that a value currently might be …\nMarker that indicates that a value can currently only be …\nMarker that indicates that a value currently only has a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAxis-aligned bounding box.\nTrait for safe conversion from Godot object references …\nBase type of the class.\nA 3x3 matrix, typically used as an orthogonal basis for …\n<code>core class Button</code> inherits <code>BaseButton</code> (manually managed).\nCannot cast the object to the given Godot class.\n<code>core class CanvasItem</code> inherits <code>Node</code> (manually managed).\n<code>core class CanvasLayer</code> inherits <code>Node</code> (manually managed).\nAllows registration of exported properties, methods and …\nRGBA color with 32-bit floating point components.\n<code>core class ColorRect</code> inherits <code>Control</code> (manually managed).\n<code>core class Control</code> inherits <code>CanvasItem</code> (manually managed).\nA custom error message.\nA reference-counted <code>Dictionary</code> of <code>Variant</code> key-value pairs.\nMetadata about the exported property.\nEnable struct types to be parsed as argument lists.\nTypes that can be converted from a <code>Variant</code>. Conversions …\nError type returned by <code>FromVariant::from_variant</code>.\nTrait for declaring library-level GDNative callbacks. See …\nError codes used in various Godot APIs.\nTrait for Godot API objects. This trait is sealed, and …\nGodot’s reference-counted string type.\n<code>core class Image</code> inherits <code>Resource</code> (reference-counted).\nA handle that can register new classes to the engine …\n<code>core singleton class Input</code> inherits <code>Object</code> (manually …\n<code>core class InputEvent</code> inherits <code>Resource</code> …\n<code>core class InputEventKey</code> inherits <code>InputEventWithModifiers</code> …\nA persistent reference to a GodotObject with a rust …\nGodotObjects that have a zero argument constructor.\nInvalid enum representation.\nError indicating that the implementation encountered a …\nCollection contains an invalid field.\nGiven object is not an instance of the expected …\nCollection contains an invalid item.\nLength of the collection is different from the expected …\nNull value given for a non-nullable type, with no further …\nInvalid struct representation.\nVariant type is different from the expected one.\n<code>core class KinematicBody</code> inherits <code>PhysicsBody</code> (manually …\n<code>core class KinematicBody2D</code> inherits <code>PhysicsBody2D</code> …\n<code>core class Label</code> inherits <code>Control</code> (manually managed).\nMarker that indicates that a type is manually managed.\nThe memory management kind of this type. This modifies the …\nSafe low-level trait for stateful, variadic methods that …\nBuilder type used to register a method on a <code>NativeClass</code>.\nTrait used for describing and initializing a Godot script …\nMakes it possible to use a type as a NativeScript. …\nTrait used to provide information of Godot-exposed methods …\nA trait for incrementing the reference count to a Godot …\n<code>core class Node</code> inherits <code>Object</code> (manually managed).\n<code>core class Node2D</code> inherits <code>CanvasItem</code> (manually managed).\nA reference-counted relative or absolute path in a scene …\nRepresents an explicit null reference in method arguments. …\nThe base class of all classes in the Godot hierarchy.\nTypes that can only be safely converted to a <code>Variant</code> as …\n<code>core class PackedScene</code> inherits <code>Resource</code> …\n3D plane in Hessian form: <code>a*b + b*y + c*z + d = 0</code>\nA reference-counted CoW typed vector using Godot’s pool …\nPlaceholder type for exported properties with no backing …\nQuaternion, used to represent 3D rotations.\nManually managed Godot classes implementing <code>queue_free</code>. …\n2D axis-aligned bounding box.\nA polymorphic smart pointer for Godot objects whose …\nMarker that indicates that a type is reference-counted.\nBase class of all reference-counted types. Inherits <code>Object</code>.\n<code>core singleton class ResourceLoader</code> inherits <code>Object</code> …\nA RID (“resource ID”) is an opaque handle that refers …\n<code>core class SceneTree</code> inherits <code>MainLoop</code> (manually managed).\n<code>core class Shader</code> inherits <code>Resource</code> (reference-counted).\nMarker that indicates that a value currently might be …\nClass to construct a signal. Make sure to call <code>Self::done()</code>…\nParameter in a signal declaration.\n<code>core class Spatial</code> inherits <code>Node</code> (manually managed).\n<code>core class Sprite</code> inherits <code>Node2D</code> (manually managed).\nInterned string.\nMarker trait for API types that are subclasses of another …\nA reference to a GodotObject with a rust NativeClass …\nA temporary safe pointer to Godot objects that tracks …\n<code>core class Texture</code> inherits <code>Resource</code> (reference-counted).\nMarker that indicates that a value can currently only be …\n<code>core class Timer</code> inherits <code>Node</code> (manually managed).\nTypes that can be converted to a <code>Variant</code>.\nTrait for types whose <code>ToVariant</code> implementations preserve …\nAffine 3D transform (3x4 matrix).\nAffine 2D transform (2x3 matrix).\n<code>core class Tween</code> inherits <code>Node</code> (manually managed).\nMarker that indicates that a value currently only has a …\nError indicating that the implementation encountered an …\nAn unspecified error.\nUser-data wrapper type of the class.\nA <code>Variant</code> can represent all Godot values (core types or …\nA reference-counted <code>Variant</code> vector. Godot’s generic …\n2D vector class.\n3D vector class.\n<code>core class Viewport</code> inherits <code>Node</code> (manually managed).\nThe first basis vector of the transform.\nCreates a persistent reference to the same Godot object …\nCreates a persistent reference to the same Godot object …\nCreates a persistent reference to the same Godot object …\nConvenience method  to obtain a reference to an “…\nThe second basis vector of the transform.\nThe basis is a matrix containing 3 vectors as its columns. …\nCalls the method on <code>this</code> with <code>args</code>.\nDeclares the library-level GDNative callbacks. See […\nPerforms a dynamic reference downcast to target type.\nDistance from the coordinate system origin (in the …\nDefault value, used when no argument is provided.\nMatrix rows. These are <strong>not</strong> the basis vectors!\nConvenience method to emplace <code>self</code> into an …\nMetadata and UI hints about exporting, e.g. parameter type.\nRecovers a instance ID previously returned by …\nCallback invoked on startup, before any other callbacks.\nCallback invoked after startup, immediately after …\nCallback invoked on shutdown, after all other callbacks.\nConvenience method to obtain a reference to a node at <code>path</code> …\nConvenience method to obtain a reference to a node at <code>path</code> …\nPrints and returns the value of a given expression for …\nPrint an error using the engine’s logging system …\nThis macro now does nothing. It is provided only for …\nThis macro now does nothing. It is provided only for …\nLegacy macro that declares all the API endpoints necessary …\nLegacy macro that declares all the API endpoints necessary …\nPrint a message using the engine’s logging system …\nPrint a warning using the engine’s logging system …\nConvenience macro to wrap an object’s method into a …\nLoads a resource from the filesystem located at <code>path</code>.\nCollects method signatures of all functions in a …\nWires up necessary internals for a concrete …\nParameter name.\nFunction that creates a value of <code>Self</code>, used for the …\nFunction that registers all exposed methods to Godot.\nRegister any exported properties to Godot.\nCallback invoked every frame if any NativeScripts are …\nCallback invoked after startup, before <code>NativeScript</code>s are …\nCallback invoked during engine cleanup if NativeScript has …\nCallback invoked before a thread managed by Godot other …\nCallback invoked after a thread managed by Godot other …\nCreates a new instance of <code>Self</code> using a zero-argument …\nConvenience method to create an <code>Instance&lt;Self, Unique&gt;</code>. …\nCreates a new reference to the underlying object.\nNormal vector, perpendicular to the plane.\nCreates an explicitly null reference of <code>Self</code> as a method …\nThe new origin of the transformed coordinate system.\nThe origin of the transform. The coordinate space defined …\nThe bounding box’s position in 3D space.\nThe rectangle’s position in 2D space.\nMakes a function profiled in Godot’s built-in profiler. …\nReturns an optional site where this method is defined. …\nWidth, height, and depth of the bounding box.\nWidth and height.\nRecovers a instance ID previously returned by …\nPerforms a static reference upcast to a supertype that is …\nIn which context the signal parameter is used.\nUser-data attributes from <code>export::user_data</code> module.\nNames of all expected variants known at compile time\nName of the unknown variant\nSpecial user-data wrapper intended for zero-sized types, …\nUser-data wrapper encapsulating a <code>Arc&lt;T&gt;</code>. Does not …\nUser-data wrapper analogous to a <code>Arc&lt;RefCell&lt;T&gt;&gt;</code>, that is …\nUser-data wrapper encapsulating a <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>.\nUser-data wrapper encapsulating a <code>Arc&lt;RwLock&lt;T&gt;&gt;</code>.\nA string encoding information about the code being …\nAdd a data point to Godot’s built-in profiler. The …\nAdd a data point to Godot’s built-in profiler using this …\nCreate a borrowed version of <code>self</code> for repeated use with …\nReturns the argument unchanged.\nCreates a <code>Signature</code> from a NUL-terminated byte slice, …\nCreates a <code>Signature</code> from a <code>CStr</code> in the specified format. …\nCreates a <code>Signature</code> from an owned <code>CString</code> in the specified …\nCalls <code>U::from(self)</code>.\nCreates a <code>Signature</code> in the correct form using the given …\nTimes a closure and adds the measured time to Godot’s …\nTimes a closure and adds the measured time to Godot’s …\nConvenience macro to create a profiling signature with a …\nAdapter for async methods that implements <code>Method</code> and can …\nTrait for async methods. When exported, such methods …\nContext for creating <code>yield</code>-like futures in async methods.\nA helper structure for working around naming future types. …\nAdapter for methods whose arguments are statically …\nTrait for async methods whose argument lists are known at …\nFuture that can be <code>await</code>ed for a signal or a <code>resume</code> call …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrap <code>f</code> in an adapter that implements <code>AsyncMethod</code>.\nWrap <code>f</code> in an adapter that implements <code>Method</code>.\nAdds required supporting NativeScript classes to <code>handle</code>. …\nSets the global executor for the current thread to a …\nSets the global executor for the current thread to a …\nReturns a future that waits until the specified signal is …\nReturns an optional site where this method is defined. …\nReturns an optional site where this method is defined. …\nConsumes this <code>Spawner</code> and spawns a future returned by the …\nSpawns the future for result of this method with <code>spawner</code>. …\nSpawns the future for result of this method with <code>spawner</code>. …\nReleases all observers still in use. This should be called …\nReturns a future that waits until the corresponding …")