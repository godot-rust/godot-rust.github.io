searchState.loadedDescShard("godot", 7, "Godot enumerator name: …\nGodot enumerator name: <code>HAND_JOINT_PINKY_FINGER_TIP</code>\nGodot enumerator name: <code>HAND_JOINT_FLAG_POSITION_TRACKED</code>\nGodot enumerator name: <code>HAND_JOINT_FLAG_POSITION_VALID</code>\nGodot enumerator name: <code>HAND_JOINT_RING_FINGER_METACARPAL</code>\nGodot enumerator name: …\nGodot enumerator name: …\nGodot enumerator name: …\nGodot enumerator name: <code>HAND_JOINT_RING_FINGER_TIP</code>\nGodot enumerator name: <code>HAND_JOINT_THUMB_METACARPAL</code>\nGodot enumerator name: <code>HAND_JOINT_THUMB_PHALANX_DISTAL</code>\nGodot enumerator name: <code>HAND_JOINT_THUMB_PHALANX_PROXIMAL</code>\nGodot enumerator name: <code>HAND_JOINT_THUMB_TIP</code>\nGodot enumerator name: <code>HAND_TRACKING_SOURCE_UNKNOWN</code>\nGodot enumerator name: <code>HAND_TRACKING_SOURCE_UNOBSTRUCTED</code>\nGodot enumerator name: <code>HAND_JOINT_WRIST</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGodot enumerator name: <code>XR_ENV_BLEND_MODE_ADDITIVE</code>\nGodot enumerator name: <code>XR_ENV_BLEND_MODE_ALPHA_BLEND</code>\nGodot enumerator name: <code>XR_AR</code>\nGodot enumerator name: <code>XR_PLAY_AREA_3DOF</code>\nGodot enumerator name: <code>XR_EXCESSIVE_MOTION</code>\nGodot enumerator name: <code>XR_EXTERNAL</code>\nGodot enumerator name: <code>XR_INSUFFICIENT_FEATURES</code>\nGodot enumerator name: <code>XR_MONO</code>\nGodot enumerator name: <code>XR_NONE</code>\nGodot enumerator name: <code>XR_NORMAL_TRACKING</code>\nGodot enumerator name: <code>XR_NOT_TRACKING</code>\nGodot enumerator name: <code>XR_ENV_BLEND_MODE_OPAQUE</code>\nGodot enumerator name: <code>XR_QUAD</code>\nGodot enumerator name: <code>XR_PLAY_AREA_ROOMSCALE</code>\nGodot enumerator name: <code>XR_PLAY_AREA_SITTING</code>\nGodot enumerator name: <code>XR_PLAY_AREA_STAGE</code>\nGodot enumerator name: <code>XR_STEREO</code>\nGodot enumerator name: <code>XR_PLAY_AREA_UNKNOWN</code>\nGodot enumerator name: <code>XR_UNKNOWN_TRACKING</code>\nGodot enumerator name: <code>XR_VR</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGodot enumerator name: <code>XR_TRACKING_CONFIDENCE_HIGH</code>\nGodot enumerator name: <code>XR_TRACKING_CONFIDENCE_LOW</code>\nGodot enumerator name: <code>XR_TRACKING_CONFIDENCE_NONE</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGodot enumerator name: <code>TRACKER_HAND_LEFT</code>\nGodot enumerator name: <code>TRACKER_HAND_MAX</code>\nGodot enumerator name: <code>TRACKER_HAND_RIGHT</code>\nGodot enumerator name: <code>TRACKER_HAND_UNKNOWN</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGodot enumerator name: <code>TRACKER_ANCHOR</code>\nGodot enumerator name: <code>TRACKER_ANY</code>\nGodot enumerator name: <code>TRACKER_ANY_KNOWN</code>\nGodot enumerator name: <code>TRACKER_BASESTATION</code>\nGodot enumerator name: <code>TRACKER_BODY</code>\nGodot enumerator name: <code>TRACKER_CONTROLLER</code>\nGodot enumerator name: <code>TRACKER_FACE</code>\nGodot enumerator name: <code>TRACKER_HAND</code>\nGodot enumerator name: <code>TRACKER_HEAD</code>\nGodot enumerator name: <code>TRACKER_UNKNOWN</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGodot enumerator name: <code>APPEND_ADDINZIP</code>\nGodot enumerator name: <code>APPEND_CREATE</code>\nGodot enumerator name: <code>APPEND_CREATEAFTER</code>\nDefault-param extender for <code>ZipPacker::open_ex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault-param extender for <code>ZipReader::file_exists_ex</code>.\nDefault-param extender for <code>ZipReader::read_file_ex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns the extension with full functionality in editor.\nFirst level loaded by Godot. Builtin types are available, …\nFourth level loaded by Godot, only in the editor. All …\nDetermines if and how an extension’s code is run in the …\nDefines the entry point for a GDExtension Rust library.\nProvides meta-information about the library and the Godot …\nStage of the Godot initialization process.\nThird level loaded by Godot. Most classes are available.\nSecond level loaded by Godot. Only server classes and …\nOnly runs <code>#[class(tool)]</code> classes in the editor.\nFor a string “4.x”, returns <code>true</code> if the current Godot …\nDetermines if and how an extension’s code is run in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nProc-macro attribute to be used in combination with the …\nVersion of the Godot engine which loaded gdext via …\nVersion of the Godot engine which loaded gdext via …\nGodot version against which gdext was compiled.\nGodot version against which gdext was compiled, as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines the initialization level at which the extension …\nCustom logic when a certain init-level of Godot is …\nCustom logic when a certain init-level of Godot is loaded.\nWhether to enable hot reloading of this library. Return …\nFor a string “4.x”, returns <code>true</code> if the current Godot …\nPushes an error message to Godot’s built-in debugger and …\nPrints to the Godot console.\nPrints to the Godot console. Supports BBCode, color and …\nLogs a script error to Godot’s built-in debugger and to …\nPushes a warning message to Godot’s built-in debugger …\nRestricted version of <code>Gd</code>, to hold the base instance inside …\nThe immediate superclass of <code>T</code>. This is always a Godot …\nMutable/exclusive reference guard for a <code>Base</code> pointer.\nShared reference guard for a <code>Base</code> pointer.\nLibrary-implemented trait to check bounds on <code>GodotClass</code> …\nWhether this class is a core Godot class provided by the …\nDefines the memory strategy of the instance (at runtime).\nNumber of <strong>distinct</strong> enumerators in the enum.\nAuto-implemented for all engine-provided bitfields.\nAuto-implemented for all engine-provided enums.\nSmart pointer to objects owned by the Godot engine.\nMutably/exclusively bound reference guard for a <code>Gd</code> smart …\nImmutably/shared bound reference guard for a <code>Gd</code> smart …\nMakes <code>T</code> eligible to be managed by Godot and stored in <code>Gd&lt;T&gt;</code>…\nInitialization level, during which this class should be …\nTrait for enums that can be used as indices in arrays.\nNon-strict inheritance relationship in the Godot class …\nRepresents a non-zero instance ID.\nDefines the memory strategy of the static type.\nExtension trait for all manually managed classes.\nExtension trait for all reference-counted classes.\nType representing the absence of a base class, at the root …\nError stemming from the non-uniqueness of the <code>Gd</code> instance.\nErgonomic late-initialization container with <code>ready()</code> …\nMutable/exclusive reference guard for a <code>Base</code> pointer.\nShared reference guard for a <code>Base</code> pointer.\nTrait that is automatically implemented for user classes …\nReturns a shared reference suitable for calling engine …\nReturns a reference to the <code>Base</code> stored by this object.\nReturns a mutable reference suitable for calling engine …\nHands out a guard for a shared borrow, through which the …\nHands out a guard for an exclusive borrow, through which …\nDifferent ways how bounds of a <code>GodotClass</code> can be checked.\nReturns a callable referencing a method from this object …\nCapability traits, providing dedicated functionalities for …\n⚠️ <strong>Downcast:</strong> convert into a smart pointer to a derived …\ncheck <code>Gd</code> reference uniqueness.\nThe name of the class, under which it is registered in …\nCreates a default-constructed <code>T</code> inside a smart pointer.\nReturns a shared reference to the value.\nReturns an exclusive reference to the value.\n⚠️ Returns whether two <code>Gd</code> pointers point to the same …\nDestroy the manually-managed Godot object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n⚠️ Constructs an instance ID from a non-zero integer, …\nCreates a <code>Gd&lt;T&gt;</code> using a function that constructs a <code>T</code> from …\n⚠️ Looks up the given instance ID and returns the …\nMoves a user-created object into this smart pointer, …\nGet the detected reference count\n⚠️ Hashes this object based on its instance ID.\nReturns whether <code>Self</code> inherits from <code>U</code>.\nRuns manual initialization.\n⚠️ Returns the instance ID of this object (panics when …\nReturns the last known, possibly invalid instance ID of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this smart pointer points to a live object (read …\nReturns if the obj being referred-to is inheriting …\nLeave uninitialized, expects manual initialization during …\nSchedule automatic initialization before <code>ready()</code>.\nReturn a new, manually-managed <code>Gd</code> containing a …\nReturn a new, ref-counted <code>Gd</code> containing a …\nOrdinal value of the enumerator, as specified in Godot. …\nOrdinal value of the bit flag, as specified in Godot.\nReturns the <code>Gd</code> pointer containing this object.\nConverts the enumerator to <code>usize</code>, which can be used as an …\n<strong>Downcast:</strong> try to convert into a smart pointer to a derived …\nConstructs an instance ID from an integer, or <code>None</code> if the …\nLooks up the given instance ID and returns the associated …\n<strong>Upcast:</strong> convert into a smart pointer to a base class. …\n<strong>Upcast exclusive-ref:</strong> access this object as an exclusive …\n<strong>Upcast shared-ref:</strong> access this object as a shared …\nExpresses that a class is declared by the Godot engine.\nExpresses that a class is declared by the user.\nTrait that specifies who declares a given <code>GodotClass</code>.\nSpecifies the memory strategy of the dynamic type.\nMemory managed through Godot reference counter, if …\nNo memory management, user responsible for not leaking. …\nMemory managed through Godot reference counter (always …\nSpecifies the memory strategy of the static type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImplements <code>Bounds</code> for a user-defined class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait for all classes that are default-constructible from …\nAuto-implemented for <code>#[godot_api] impl MyClass</code> blocks\nAuto-implemented for …\nAxis-aligned bounding box in 3D space.\nABGR channel order. Reverse of the default RGBA order.\nARGB channel order. More compatible with DirectX.\nGodot’s <code>Array</code> type.\nGodot class <code>AudioStreamPlayer.</code>\nRestricted version of <code>Gd</code>, to hold the base instance inside …\nThe immediate superclass of <code>T</code>. This is always a Godot …\nA 3x3 matrix, typically used as an orthogonal basis for …\nA <code>Callable</code> represents a function in Godot.\nGodot class <code>Camera2D.</code>\nGodot class <code>Camera3D.</code>\nColor built-in type, in floating-point RGBA format.\nHSVA floating-number Color representation.\nFirst level loaded by Godot. Builtin types are available, …\nGodot’s <code>Dictionary</code> type.\nFourth level loaded by Godot, only in the editor. All …\nThe ordering used to interpret a set of euler angles as …\nTrait implemented for types that can be used as <code>#[export]</code> …\nDerive macro for <code>Export</code> on enums.\nDefines the entry point for a GDExtension Rust library.\nDefines the canonical conversion from Godot for a type.\nOpen a file for reading or writing.\nGodot’s reference counted string type.\nSmart pointer to objects owned by the Godot engine.\nMutably/exclusively bound reference guard for a <code>Gd</code> smart …\nImmutably/shared bound reference guard for a <code>Gd</code> smart …\nMakes <code>T</code> eligible to be managed by Godot and stored in <code>Gd&lt;T&gt;</code>…\nDerive macro for <code>GodotClass</code> on structs.\nDerive macro for <code>GodotConvert</code> on structs.\nVirtual methods for class <code>AudioStreamPlayer</code>.\nVirtual methods for class <code>Camera2D</code>.\nVirtual methods for class <code>Camera3D</code>.\nInitialization level, during which this class should be …\nVirtual methods for class <code>Node</code>.\nVirtual methods for class <code>Node2D</code>.\nVirtual methods for class <code>Node3D</code>.\nVirtual methods for class <code>Object</code>.\nVirtual methods for class <code>PackedScene</code>.\nVirtual methods for class <code>RefCounted</code>.\nVirtual methods for class <code>Resource</code>.\nVirtual methods for class <code>SceneTree</code>.\nNon-strict inheritance relationship in the Godot class …\nStage of the Godot initialization process.\nGodot class <code>Input.</code>\nRepresents a non-zero instance ID.\nAn invalid RID will never refer to a resource. Internally …\nGodot class <code>Node.</code>\nGodot class <code>Node2D.</code>\nGodot class <code>Node3D.</code>\nA pre-parsed scene tree path.\nGodot class <code>Object.</code>\nErgonomic late-initialization container with <code>ready()</code> …\nImplements Godot’s <code>PackedByteArray</code> type, which is a …\nImplements Godot’s <code>PackedColorArray</code> type, which is a …\nImplements Godot’s <code>PackedFloat32Array</code> type, which is a …\nImplements Godot’s <code>PackedFloat64Array</code> type, which is a …\nImplements Godot’s <code>PackedInt32Array</code> type, which is a …\nImplements Godot’s <code>PackedInt64Array</code> type, which is a …\nGodot class <code>PackedScene.</code>\nImplements Godot’s <code>PackedStringArray</code> type, which is a …\nImplements Godot’s <code>PackedVector2Array</code> type, which is a …\nImplements Godot’s <code>PackedVector3Array</code> type, which is a …\nImplements Godot’s <code>PackedVector4Array</code> type, which is a …\n3D plane in Hessian normal form.\nA 4x4 matrix used for 3D projective transformations.\nThe eye to create a projection for, when creating a …\nA projection’s clipping plane.\nConvenience conversion between <code>real</code> and <code>f32</code>/<code>f64</code>.\n2D axis-aligned bounding box.\n2D axis-aligned integer bounding box.\nGodot class <code>RefCounted.</code>\nGodot class <code>Resource.</code>\nRGBA channel order. Godot’s default.\nA RID (“resource ID”) is an opaque handle that refers …\nRepresents a custom callable object defined in Rust.\nThird level loaded by Godot. Most classes are available.\nGodot class <code>SceneTree.</code>\nSecond level loaded by Godot. Only server classes and …\nA <code>Signal</code> represents a signal of an Object instance in …\nA string optimized for unique names.\nDefines the canonical conversion to Godot for a type.\nTrait that allows conversion from tuples to vectors.\nAffine 2D transform (2x3 matrix).\nAffine 3D transform (3x4 matrix).\nMarks types that are registered via “type string hint” …\nA valid RID may refer to some resource, but is not …\nTrait implemented for types that can be used as <code>#[var]</code> …\nDerive macro for <code>Var</code> on enums.\nGodot variant type, able to store a variety of different …\nA Godot <code>Array</code> without an assigned type.\nGodot enum name: <code>Variant.Operator</code>.\nGodot enum name: <code>Variant.Type</code>.\nVector used for 2D math using floating point coordinates.\nEnumerates the axes in a <code>Vector2</code>.\nVector used for 2D math using integer coordinates.\nVector used for 3D math using floating point coordinates.\nEnumerates the axes in a <code>Vector3</code>.\nVector used for 3D math using integer coordinates.\nVector used for 4D math using floating point coordinates.\nEnumerates the axes in a <code>Vector4</code>.\nVector used for 4D math using integer coordinates.\nThe W axis.\nThe X axis.\nThe X axis.\nThe X axis.\nThe Y axis.\nThe Y axis.\nThe Y axis.\nThe Z axis.\nThe Z axis.\nThe color’s alpha component. A value of 0 means that the …\nThe first basis vector.\nConstructs <code>Array</code> literals, similar to Rust’s standard …\nCast this <code>real</code> to an <code>f32</code> using <code>as</code>.\nCast this <code>real</code> to an <code>f64</code> using <code>as</code>.\nThe color’s blue component.\nThe second basis vector.\nThe basis is a matrix containing 3 vectors as its columns. …\nThe name of the class, under which it is registered in …\nThe columns of the projection matrix.\nDistance between the plane and the origin point.\nThe export info to use for an exported field of this type, …\nConstructs <code>Dictionary</code> literals, close to Godot’s own …\nDetermines if and how an extension’s code is run in the …\nReturns the argument unchanged.\nCast an <code>f32</code> to a <code>real</code> using <code>as</code>.\nCast an <code>f64</code> to a <code>real</code> using <code>as</code>.\n⚠️ Performs the conversion.\n⚠️ Performs the conversion from a <code>Variant</code>.\nThe color’s green component.\nProc-macro attribute to be used in combination with the …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nProc-macro attribute to be used with <code>impl</code> blocks of …\nPushes an error message to Godot’s built-in debugger and …\nPrints to the Godot console.\nPrints to the Godot console. Supports BBCode, color and …\nLogs a script error to Godot’s built-in debugger and to …\nPushes a warning message to Godot’s built-in debugger …\nReturns whether <code>Self</code> inherits from <code>U</code>.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nCalls <code>U::from(self)</code>.\nConverts this type to the Godot type.\nInvokes the callable with the given arguments as <code>Variant</code> …\n⚠️ Loads a resource from the filesystem located at <code>path</code>…\nDetermines the initialization level at which the extension …\nNormal vector pointing away from the plane.\nCustom logic when a certain init-level of Godot is …\nCustom logic when a certain init-level of Godot is loaded.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nThe origin of the transform. The coordinate space defined …\nThe new origin of the transformed coordinate system.\nWhether to enable hot reloading of this library. Return …\nThe position of the rectangle.\nThe color’s red component.\nFloating point type used for many structs and functions in …\nA macro to coerce float-literals into the <code>real</code> type.\nRe-export of <code>std::f32::consts</code> or <code>std::f64::consts</code>, …\nArray of reals.\nThe rows of the matrix. These are <em>not</em> the basis vectors.\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nThe size of the rectangle.\nAccess vector components in different order.\nConverts this type to the Godot type by reference, usually …\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nConverts this type to a Variant.\nPerforms the conversion.\nPerforms the conversion from a <code>Variant</code>.\nLoads a resource from the filesystem located at <code>path</code>.\nReturns the representation of this type as a type string.\nGlobal utility functions.\nConstructs <code>VariantArray</code> literals, similar to Rust’s …\nThe vector’s W component.\nThe vector’s W component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Z component.\nThe vector’s Z component.\nThe vector’s Z component.\nThe vector’s Z component.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nDerive macro for <code>Export</code> on enums.\nDerive macro for <code>GodotClass</code> on structs.\nDerive macro for <code>GodotConvert</code> on structs.\nDerive macro for <code>Var</code> on enums.\nProc-macro attribute to be used with <code>impl</code> blocks of …\nRegistration support for property types.\nTrait implemented for types that can be used as <code>#[export]</code> …\nInfo needed by Godot, for how to export a type to the …\nMarks types that are registered via “type string hint” …\nTrait implemented for types that can be used as <code>#[var]</code> …\nThe export info to use for an exported field of this type, …\nFunctions used to translate user-provided arguments into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the representation of this type as a type string.\nCreate a new <code>PropertyHintInfo</code> with a property hint of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")