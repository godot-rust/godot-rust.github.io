searchState.loadedDescShard("godot", 7, "Derive macro for <code>Var</code> on enums.\nGodot variant type, able to store a variety of different …\nA Godot <code>Array</code> without an assigned type.\nVector used for 2D math using floating point coordinates.\nEnumerates the axes in a <code>Vector2</code>.\nVector used for 2D math using integer coordinates.\nVector used for 3D math using floating point coordinates.\nEnumerates the axes in a <code>Vector3</code>.\nVector used for 3D math using integer coordinates.\nVector used for 4D math using floating point coordinates.\nEnumerates the axes in a <code>Vector4</code>.\nVector used for 4D math using integer coordinates.\nThe W axis.\nThe X axis.\nThe X axis.\nThe X axis.\nThe Y axis.\nThe Y axis.\nThe Y axis.\nThe Z axis.\nThe Z axis.\nThe color’s alpha component. A value of 0 means that the …\nThe first basis vector.\nConstructs <code>Array</code> literals, similar to Rust’s standard …\nCast this <code>real</code> to an <code>f32</code> using <code>as</code>.\nCast this <code>real</code> to an <code>f64</code> using <code>as</code>.\nThe color’s blue component.\nThe second basis vector.\nThe basis is a matrix containing 3 vectors as its columns. …\nThe name of the class, under which it is registered in …\nThe columns of the projection matrix.\nDistance between the plane and the origin point.\nThe export info to use for an exported field of this type, …\nConstructs <code>Dictionary</code> literals, close to Godot’s own …\nDetermines if and how an extension’s code is run in the …\nReturns the argument unchanged.\nCast an <code>f32</code> to a <code>real</code> using <code>as</code>.\nCast an <code>f64</code> to a <code>real</code> using <code>as</code>.\n⚠️ Performs the conversion.\n⚠️ Performs the conversion from a <code>Variant</code>.\nThe color’s green component.\nProc-macro attribute to be used in combination with the …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nCalled whenever <code>get()</code> is called or Godot gets the value of …\nProc-macro attribute to be used with <code>impl</code> blocks of …\nPushes an error message to Godot’s built-in debugger and …\nPrints to the Godot console.\nPrints to the Godot console. Supports BBCode, color and …\nLogs a script error to Godot’s built-in debugger and to …\nPushes a warning message to Godot’s built-in debugger …\nReturns whether <code>Self</code> inherits from <code>U</code>.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nGodot constructor, accepting an injected <code>base</code> object.\nCalls <code>U::from(self)</code>.\nConverts this type to the Godot type.\nInvokes the callable with the given arguments as <code>Variant</code> …\n⚠️ Loads a resource from the filesystem located at <code>path</code>…\nDetermines the initialization level at which the extension …\nNormal vector pointing away from the plane.\nCustom logic when a certain init-level of Godot is …\nCustom logic when a certain init-level of Godot is loaded.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nCalled when the object receives a Godot notification.\nThe origin of the transform. The coordinate space defined …\nThe new origin of the transformed coordinate system.\nWhether to enable hot reloading of this library. Return …\nThe position of the rectangle.\nThe color’s red component.\nFloating point type used for many structs and functions in …\nA macro to coerce float-literals into the <code>real</code> type.\nRe-export of <code>std::f32::consts</code> or <code>std::f64::consts</code>, …\nArray of reals.\nThe rows of the matrix. These are <em>not</em> the basis vectors.\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nCalled whenever Godot <code>set()</code> is called or Godot sets the …\nThe size of the rectangle.\nAccess vector components in different order.\nConverts this type to the Godot type by reference, usually …\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nString representation of the Godot instance.\nConverts this type to a Variant.\nPerforms the conversion.\nPerforms the conversion from a <code>Variant</code>.\nLoads a resource from the filesystem located at <code>path</code>.\nReturns the representation of this type as a type string.\nGlobal utility functions.\nConstructs <code>VariantArray</code> literals, similar to Rust’s …\nThe vector’s W component.\nThe vector’s W component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s X component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Y component.\nThe vector’s Z component.\nThe vector’s Z component.\nThe vector’s Z component.\nThe vector’s Z component.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nDerive macro for <code>Export</code> on enums.\nDerive macro for <code>GodotClass</code> on structs.\nDerive macro for <code>GodotConvert</code> on structs.\nDerive macro for <code>Var</code> on enums.\nProc-macro attribute to be used with <code>impl</code> blocks of …\nRegistration support for property types.\nTrait implemented for types that can be used as <code>#[export]</code> …\nInfo needed by Godot, for how to export a type to the …\nMarks types that are registered via “type string hint” …\nTrait implemented for types that can be used as <code>#[var]</code> …\nThe export info to use for an exported field of this type, …\nFunctions used to translate user-provided arguments into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the representation of this type as a type string.\nCreate a new <code>PropertyHintInfo</code> with a property hint of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")